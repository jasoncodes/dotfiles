#!/usr/bin/env ruby

require 'optparse'
require 'date'
require 'time'
require 'json'
require 'csv'
require 'net/http'
require 'cgi'

default_options = {
  format: :default,
  week_start: :monday,
  previous_weeks: 2,
}.freeze

options = {}
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options]"

  opts.on '--format=[default|projector|json]', %i[default projector json] do |format|
    raise OptionParser::MissingArgument unless format
    options[:format] = format
    options[:week_start] = :sunday if format == :projector
  end

  opts.on '--previous-weeks=n', Integer, "default: #{default_options.fetch(:previous_weeks)}" do |previous_weeks|
    raise OptionParser::InvalidArgument if previous_weeks < 0
    options[:previous_weeks] = previous_weeks
  end

  opts.on '--rename [from] [to]' do |name_from|
    raise OptionParser::MissingArgument if ARGV.size < 1
    raise OptionParser::InvalidArgument if ARGV.size > 1

    options[:rename_from] = name_from
    options[:rename_to] = ARGV.shift
  end
end

begin
  option_parser.parse!
rescue OptionParser::InvalidArgument, OptionParser::MissingArgument
  $stderr.puts $!.to_s
  abort option_parser.help
end

if ARGV.size > 0
  abort option_parser.help
end

require 'yaml'

config = YAML.safe_load(File.read(File.expand_path('~/.toggl')))
if config.is_a? String
  config = {
    'api_token' => config,
  }
end

auth = [
  config.fetch('api_token'),
  'api_token',
]

def build_query(params)
  params.map do |key, value|
    "#{CGI.escape(key.to_s)}=#{CGI.escape(value)}"
  end.join('&')
end

if options.key?(:rename_from)
  start_date = Date.today - 7
  end_date = Date.today + 7

  uri = URI.parse('https://api.track.toggl.com/api/v8/time_entries')
  uri.query = build_query(
    start_date: start_date.to_time.iso8601,
    end_date: end_date.to_time.iso8601,
  )
  request = Net::HTTP::Get.new(uri)
  request.basic_auth(*auth)
  response = Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
    http.request(request)
  end
  response.error! unless response.is_a?(Net::HTTPOK)
  time_entries = JSON.parse(response.body)

  time_entries.each do |entry|
    old_description = entry.fetch('description', '')
    new_description = old_description.sub(/^#{Regexp.escape options.fetch(:rename_from)}($| \|)/, "#{options.fetch(:rename_to)}\\1")
    if new_description != old_description
      puts "#{Time.parse(entry.fetch('start')).to_date} #{((Time.parse(entry.fetch('stop', Time.now.to_s)) - Time.parse(entry.fetch('start'))) / 3600.0).round(2)} #{old_description.inspect} => #{new_description.inspect}"

      uri = URI.parse("https://api.track.toggl.com/api/v8/time_entries/#{entry.fetch('id')}")
      request = Net::HTTP::Post.new(uri)
      request.basic_auth(*auth)
      request['Content-Type'] = 'application/json'
      request.body = JSON.dump(
        time_entry: {
          description: new_description,
        },
      )
      response = Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
        http.request(request)
      end
      response.error! unless response.is_a?(Net::HTTPOK)
    end
  end

  exit
end

options = default_options.merge(options)

case options.fetch(:week_start)
when :monday
  week_strftime_format = '%GW%V'
  weekday_start = 1
when :sunday
  week_strftime_format = '%Y %U'
  weekday_start = 0
else
  raise ArgumentError
end

weekdays = (weekday_start..weekday_start+6).map { |n| n % 7 }

ref_date = Date.today - 1
start_date = ref_date - ref_date.wday + weekdays.first - 7 * options.fetch(:previous_weeks)
end_date = start_date + 6
end_date += 7 until end_date >= Date.today + 7

uri = URI.parse('https://api.track.toggl.com/api/v8/time_entries')
uri.query = build_query(
  start_date: start_date.to_time.iso8601,
  end_date: end_date.to_time.iso8601,
)
request = Net::HTTP::Get.new(uri)
request.basic_auth(*auth)
response = Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
  http.request(request)
end
response.error! unless response.is_a?(Net::HTTPOK)
time_entries = JSON.parse(response.body)

footer_text = "Total:"
max_name_len = footer_text.size

entries = time_entries.map do |entry|
  time_start = Time.parse(entry['start']).getlocal
  time_stop = entry['stop'] ? Time.parse(entry['stop']).getlocal : Time.now
  date = time_start.to_date
  name = entry['description'] || '(no description)'
  name = 'overhead' if name =~ /^overhead\s*\|/
  max_name_len = [max_name_len, name.size].max

  {
    date: date,
    name: name,
    duration: time_stop - time_start
  }
end

days = {}
entries.each do |entry|
  day = days[entry[:date]] ||= Hash.new(0.0)
  day[entry[:name]] += entry[:duration]
end

days.values.each do |tasks|
  if tasks.size > 1 && overhead = tasks.delete('overhead')
    total = tasks.values.inject(:+)
    tasks.keys.each do |name|
      tasks[name] *= (total + overhead) / total
    end
  end
end

weeks = {}

days.each do |date, tasks|
  week = date.strftime(week_strftime_format)
  duration = tasks.values.inject(:+)

  weeks[week] ||= begin
    week_date_start = date - date.wday + weekdays.first
    week_date_end = week_date_start + 6

    raise unless week_date_start.wday == weekdays.first
    raise unless week_date_end.wday == weekdays.last

    (week_date_start..week_date_end).map { |date| [date, 0] }.to_h
  end

  weeks[week][date] = duration
end

def format_hours(duration)
  hours = (duration / 3600.0).round 2
  '%0.02f' % hours
end

def format_duration(duration)
  hours = (duration / 3600.0).round 2
  "#{hours.floor.to_s.rjust 2}:#{(hours*60%60).round(0).to_s.rjust(2,'0')} (#{'%0.02f' % hours} hours)"
end

first_future_date = days.keys.sort.detect { |date| date > Date.today }

case options.fetch(:format)
when :default
  days.each do |date, tasks|
    if date == first_future_date
      puts "--- FUTURE ---"
      puts
    end

    puts date.strftime '%Y-%m-%d %A'
    tasks.each do |name, duration|
      puts "  #{name.ljust max_name_len} #{format_duration duration}"
    end
    puts "  #{footer_text.rjust max_name_len} #{format_duration tasks.values.inject(:+)}"
    puts
  end
when :projector
  COLUMNS = %w[Work\ Date Project Task Description Work\ Hours]

  normalize_key = -> (key) { key.tr(' ', '_') }

  config_projector_presets = config.fetch('projector', {})

  days.each do |date, tasks|
    if date == first_future_date
      puts "--- FUTURE ---"
      puts
    end

    projector_durations = {}

    tasks.each do |name, duration|
      projector_code, description = name.split('|', 2).map(&:to_s).map(&:strip)

      projector_presets = config_projector_presets.fetch(normalize_key.call(projector_code), nil)
      projector_presets = [projector_presets] unless projector_presets.is_a?(Array)

      projector_presets.each do |projector_preset|
        if projector_preset
          projector_key = {
            'description' => nil,
          }.merge(projector_preset)
          if description
            projector_key['description'] = [projector_key['description'], description].compact.uniq.join(' | ')
          end
        else
          projector_key = {
            'project' => nil,
            'task' => nil,
            'description' => name,
          }
        end

        projector_durations[projector_key] ||= 0
        projector_durations[projector_key] += duration / projector_presets.size
      end
    end

    $stdout.write COLUMNS.to_csv
    projector_durations.each do |projector_key, duration|
      row = {
        'Work Date' => date.strftime('%Y-%m-%d'),
        'Project' => projector_key.fetch('project'),
        'Task' => projector_key.fetch('task'),
        'Description' => projector_key.fetch('description'),
        'Work Hours' => format_hours(duration),
      }
      $stdout.write row.values_at(*COLUMNS).to_csv
    end
    puts
  end

  puts weekdays.map { |day| '  ' + Date::ABBR_DAYNAMES.fetch(day%7) }.join('  ') + '   Total'
  weeks.sort.each do |week, days|
    week_total = days.values.inject(:+)

    line = days.values.map { |day_total| str = day_total != 0 ? format_hours(day_total) : ''; str.rjust(5) }.join('  ')
    line += ' ' + format_hours(week_total).rjust(7)

    puts line
  end
when :json
  data = {}

  data[:weeks] = weeks.sort.map do |week, week_days|
    total = week_days.values.inject(:+)

    days = week_days.map { |date, value| [date, value.round(2)] }.to_h

    {
      week: week,
      days: days,
      total: total.round(2),
    }
  end

  puts JSON.pretty_generate(data)
else
  raise 'unknown format'
end
