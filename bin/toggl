#!/usr/bin/env ruby

require 'optparse'
require 'httparty'

ON_CALL_DESC = '0820.4 on call'
ON_CALL_RATE = 'On Call'

options = {
  format: :default,
  on_call: nil,
}

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options]"

  opts.on '--format=[default|bulk-create|json]', %i[default bulk-create json] do |format|
    raise OptionParser::MissingArgument unless format
    options[:format] = format
  end

  opts.on '--on-call=[this-week|last-week]', %i[this-week last-week] do |on_call|
    raise OptionParser::MissingArgument unless on_call
    options[:on_call] = on_call
  end
end

begin
  option_parser.parse!
rescue OptionParser::InvalidArgument, OptionParser::MissingArgument
  $stderr.puts $!.to_s
  abort option_parser.help
end

if ARGV.size > 0
  abort option_parser.help
end

auth = {username: File.read(File.expand_path('~/.toggl')).chomp, password: 'api_token'}

if options.fetch(:on_call)
  date = case options.fetch(:on_call)
  when :'this-week'
    Date.today
  when :'last-week'
    Date.today - 7
  else
    raise
  end

  week_start = date - (date - 1).wday

  on_call_entries = [
    {start: (week_start + 1).to_time + 17*3600, duration: 2*3600},
    {start: (week_start + 2).to_time + 17*3600, duration: 2*3600},
    {start: (week_start + 3).to_time + 17*3600, duration: 2*3600},
    {start: (week_start + 4).to_time + 17*3600, duration: 2*3600},
    {start: (week_start + 5).to_time + 9*3600, duration: 10*3600},
    {start: (week_start + 6).to_time + 9*3600, duration: 10*3600},
    {start: (week_start + 7).to_time + 17*3600, duration: 2*3600},
  ]

  time_entries = HTTParty.get(
    'https://www.toggl.com/api/v8/time_entries',
    basic_auth: auth,
    query: {
      start_date: on_call_entries.map { |on_call_entry| on_call_entry.fetch(:start) }.min.iso8601,
      end_date: on_call_entries.map { |on_call_entry| on_call_entry.fetch(:start) }.max.iso8601,
    },
  )
  time_entries.error! unless time_entries.success?

  on_call_entries.each do |on_call_entry|
    existing_entry = time_entries.detect do |entry|
      entry.fetch('description') == ON_CALL_DESC && (Time.parse(entry.fetch('start')) - on_call_entry.fetch(:start)).abs < 60
    end
    next if existing_entry

    create_response = HTTParty.post(
      'https://www.toggl.com/api/v8/time_entries',
      basic_auth: auth,
      headers: {
        'Content-Type' => 'application/json',
      },
      body: {
        time_entry: {
          description: ON_CALL_DESC,
          start: on_call_entry.fetch(:start).iso8601,
          duration: on_call_entry.fetch(:duration),
          created_with: 'jasoncodes/dotfiles',
        },
      }.to_json,
    )
    create_response.error! unless create_response.success?
  end
end

start_date = Date.today - 14
end_date = Date.today + 7

time_entries = HTTParty.get 'https://www.toggl.com/api/v8/time_entries', basic_auth: auth, query: {start_date: start_date.to_time.iso8601, end_date: end_date.to_time.iso8601}
time_entries.error! unless time_entries.success?

footer_text = "Total:"
max_name_len = footer_text.size

entries = time_entries.map do |entry|
  time_start = Time.parse(entry['start']).getlocal
  time_stop = entry['stop'] ? Time.parse(entry['stop']).getlocal : Time.now
  date = time_start.to_date
  name = entry['description'] || '(no description)'
  name = 'overhead' if name =~ /^overhead\s*\|/
  max_name_len = [max_name_len, name.size].max

  {
    date: date,
    name: name,
    duration: time_stop - time_start
  }
end

days = {}
entries.each do |entry|
  day = days[entry[:date]] ||= Hash.new(0.0)
  day[entry[:name]] += entry[:duration]
end

days.values.each do |tasks|
  on_call = tasks.delete(ON_CALL_DESC)
  if tasks.size > 1 && overhead = tasks.delete('overhead')
    total = tasks.values.inject(:+)
    tasks.keys.each do |name|
      tasks[name] *= (total + overhead) / total
    end
  end
  tasks[ON_CALL_DESC] = on_call if on_call
end

weeks = {}

days.each do |date, tasks|
  week = date.strftime('%GW%V')
  duration = tasks.values.inject(:+)

  weeks[week] ||= begin
    monday = date - date.wday + 1
    sunday = monday + 6
    raise unless monday.monday? && sunday.sunday?

    (monday..sunday).map { |date| [date, 0] }.to_h
  end

  weeks[week][date] = duration
end

def format_hours(duration)
  hours = (duration / 3600.0).round 2
  '%0.02f' % hours
end

def format_duration(duration)
  hours = (duration / 3600.0).round 2
  "#{hours.floor.to_s.rjust 2}:#{(hours*60%60).round(0).to_s.rjust(2,'0')} (#{'%0.02f' % hours} hours)"
end

first_future_date = days.keys.sort.detect { |date| date > Date.today }

case options.fetch(:format)
when :default
  days.each do |date, tasks|
    if date == first_future_date
      puts "--- FUTURE ---"
      puts
    end

    puts date.strftime '%Y-%m-%d %A'
    tasks.each do |name, duration|
      puts "  #{name.ljust max_name_len} #{format_duration duration}"
    end
    puts "  #{footer_text.rjust max_name_len} #{format_duration tasks.values.inject(:+)}"
    puts
  end
when :'bulk-create'
  COLUMNS = %w[Date Person Work\ Reference Usage\ Code Docket Purchase\ Order UoM Rate\ Code Quantity Note]

  me = HTTParty.get 'https://www.toggl.com/api/v8/me', basic_auth: auth
  me.error! unless me.success?
  person_name = me.fetch('data').fetch('fullname')

  days.each do |date, tasks|
    if date == first_future_date
      puts "--- FUTURE ---"
      puts
    end

    tasks_by_work_reference = {}

    tasks.each do |name, duration|
      work_reference, note = name.split('|', 2).map(&:to_s).map(&:strip)

      if work_reference.split.first =~ /\A[A-Z]*[0-9.]{3,}[A-Z]*\z/
        work_reference = work_reference.split.first
      end

      tasks_by_work_reference[work_reference] ||= Hash.new(0)
      tasks_by_work_reference[work_reference][note] += duration
    end

    tasks_by_work_reference.each do |work_reference, tasks|
      duration = tasks.values.inject(:+)

      note = if tasks.size == 1
        tasks.keys.first
      else
        tasks = tasks.sort_by do |note, duration|
          [note ? 1 : 2, -duration]
        end
        tasks.map do |note, duration|
          "#{format_hours duration} #{note || 'other'}"
        end.join(', ')
      end

      row = {
        'Date' => date.strftime('%Y-%m-%d'),
        'Person' => person_name,
        'Work Reference' => work_reference,
        'Usage Code' => 'Normal',
        'UoM' => 'hours',
        'Quantity' => format_hours(duration),
        'Rate Code' => work_reference == ON_CALL_DESC.split.first ? ON_CALL_RATE : nil,
        'Note' => note,
      }
      puts row.values_at(*COLUMNS).join("\t")
    end
    puts
  end

  puts (1..7).map { |day| '  ' + Date::ABBR_DAYNAMES.fetch(day%7) }.join('  ') + '   Total'
  weeks.sort.last(2).each do |_, days|
    week_total = days.values.inject(:+)

    line = days.values.map { |day_total| str = day_total ? format_hours(day_total) : ''; str.rjust(5) }.join('  ')
    line += ' ' + format_hours(week_total).rjust(7)

    puts line
  end
when :json
  data = {}

  data[:weeks] = weeks.sort.last(2).map do |week, week_days|
    total = week_days.values.inject(:+)

    {
      week: week,
      days: week_days.map { |date, value| [date, value.round(2)] }.to_h,
      total: total.round(2),
    }
  end

  puts JSON.pretty_generate(data)
else
  raise 'unknown format'
end
